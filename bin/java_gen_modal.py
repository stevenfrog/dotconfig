#!/usr/bin/env python3
"""
This class is generate formatted java modal file for files output from TCUML.
"""
import os
import sys
import getopt
import re
import frog_util
import frog_java_util

LS = os.linesep
TCSDESIGNER = 'LOY'
TCSDEVELOPER = 'TCSASSEMBLER'


def gen_java_model_file(filename):
    js = frog_java_util.get_java_structure(filename)
    content = ''
    content += frog_java_util.generate_header()
    content += frog_java_util.generate_package(js['package'])

    # Add normal import part
    is_import_part = False
    for ftype, fname in js['fields']:
        if ftype == 'Date':
            content += "import java.util.Date;" + LS
            is_import_part = True
            break
    for ftype, fname in js['fields']:
        if ftype.startswith('List<'):
            content += "import java.util.List;" + LS
            is_import_part = True
            break
    for ftype, fname in js['fields']:
        if ftype.startswith('Map<'):
            content += "import java.util.Map;" + LS
            is_import_part = True
            break
    for ftype, fname in js['fields']:
        if ftype == 'BigDecimal':
            content += "import java.math.BigDecimal;" + LS
            is_import_part = True
            break
    if is_import_part:
        content += LS

    p_class = re.compile('(?:public|protected)(?:.*) (class|interface|enum) ([A-Za-z0-9_,<> ]+?)( extends [A-Za-z0-9_,<> ]+)? \{')
    p_field = re.compile('(?:public|protected|private)(?: static)?(?: final)? ([A-Za-z0-9_,<>\[\] ]+);')

    with open(filename, 'r') as f1:
        for line in f1:
            striped_line = line.strip()

            m_class = p_class.match(striped_line)
            m_field = p_field.match(striped_line)

            if m_class:
                content += frog_java_util.generate_class_doc(js['classdoc'], TCSDESIGNER, TCSDEVELOPER)
                content += line
            elif m_field:
                f_str = m_field.group(1)
                idx = f_str.rfind('>')
                if idx > 0:
                    field_name = f_str[idx+2:]
                else:
                    strs = m_field.group(1).split()
                    field_name = strs[1]
                content += frog_java_util.generate_field_doc(field_name)
                content += line + LS


    content += frog_java_util.generate_constructor(js['class'][1])

    for ftype, fname in js['fields']:
        content += frog_java_util.generate_getter_setter(ftype, fname)

    content += '}'
    print(content)
    return content


def transfer_all_files(dirpath):
    # tranfer all java files that generated by tcuml
    src_files = frog_util.get_all_files(dirpath)

    for filename in src_files:
        transfer_one_file(filename)


def transfer_one_file(filepath):
    # tranfer one jave file
    output = filepath
    dirname, basename, ext = frog_util.file_dir_name_ext(filepath)
    original_file = dirname + os.sep + 'ZZZOrigin_' + basename + ext
    os.rename(filepath, original_file)
    with open(output, 'w') as tmp_file:
        tmp_file.write(gen_java_model_file(original_file))


def usage():
    # Print the help message
    print('This class is generate formatted java modal file for files output from TCUML.')
    print('It can transfer one java file.')
    print('It can also transfer all files in directory.')
    print('The command:')
    print('    -h print this message')
    print('    -i the file or path')
    print('The sample usage:')
    print('    java_gen_modal.py -i test.java')
    print('    java_gen_modal.py -i componet_dir')


opts, args = getopt.getopt(sys.argv[1:], 'hi:')
pathname = ''

for op, value in opts:
    if op == '-i':
        pathname = value
    elif op == '-h':
        usage()
        sys.exit()

if pathname:
    if os.path.isfile(pathname):
        transfer_one_file(pathname)
    elif os.path.isdir(pathname):
        transfer_all_files(pathname)
    print('!!!!! Generating successfully !!!!!')
else:
    usage()
